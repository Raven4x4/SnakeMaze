import numpy as np
import pygame
import sys
import random

pygame.init()

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
CYAN = (0, 255, 255)

WINDOW_SIZE = (600, 600)
BLOCK_SIZE = 20
MAZE_DIM = (WINDOW_SIZE[0] // BLOCK_SIZE, WINDOW_SIZE[1] // BLOCK_SIZE)

screen = pygame.display.set_mode(WINDOW_SIZE)
pygame.display.set_caption("Maze Solver")

class Button:
    FONT_SIZE = 20
    TEXT_COLOR = BLACK

    def __init__(self, color, x, y, width, height, text=''):
        self.color = color
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text
        self.font = pygame.font.Font(None, self.FONT_SIZE)

    def draw(self, win):
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.height), 0)
        if self.text is not None:
            text = self.font.render(self.text, True, self.TEXT_COLOR)
            win.blit(text, (self.x + (self.width / 2 - text.get_width() / 2), self.y + (self.height / 2 - text.get_height() / 2)))

    def is_over(self, pos):
        if self.x < pos[0] < self.x + self.width and self.y < pos[1] < self.y + self.height:
            return True
        return False

def generate_maze(dimensions):
    width, height = dimensions
    maze = np.zeros(dimensions, dtype=bool)
    visited = np.zeros(dimensions, dtype=bool)
    stack = [(0, 0)]

    while stack:
        current = stack[-1]
        visited[current] = True
        maze[current] = True

        neighbors = []
        for direction in [(0, -1), (1, 0), (0, 1), (-1, 0)]:
            nx, ny = current[0] + direction[0]*2, current[1] + direction[1]*2
            if 0 <= nx < width and 0 <= ny < height and not visited[nx, ny]:
                neighbors.append((nx, ny))

        if neighbors:
            next_cell = random.choice(neighbors)
            stack.append(next_cell)

            wall_x = (current[0] + next_cell[0]) // 2
            wall_y = (current[1] + next_cell[1]) // 2
            maze[wall_x, wall_y] = True
        else:
            stack.pop()

    return maze

def solve_maze(maze, start, end):
    stack = [(start, [start])]
    visited = set()

    while stack:
        current, path = stack.pop()
        if current == end:
            return path
        if current not in visited:
            visited.add(current)
            for direction in [(0, -1), (1, 0), (0, 1), (-1, 0)]:
                nx, ny = current[0] + direction[0], current[1] + direction[1]
                if 0 <= nx < maze.shape[0] and 0 <= ny < maze.shape[1] and maze[nx, ny] and (nx, ny) not in visited:
                    stack.append(((nx, ny), path + [(nx, ny)]))
    return []


def draw_maze(maze):
    for x in range(maze.shape[0]):
        for y in range(maze.shape[1]):
            rect = pygame.Rect(x*BLOCK_SIZE, y*BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE)
            pygame.draw.rect(screen, WHITE if maze[x, y] else BLACK, rect)

def draw_path(path):
    for position in path:
        rect = pygame.Rect(position[0]*BLOCK_SIZE, position[1]*BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE)
        pygame.draw.rect(screen, GREEN, rect)
        pygame.display.update()
        pygame.time.delay(50)

def draw_start_end(start, end):
    start_rect = pygame.Rect(start[0]*BLOCK_SIZE, start[1]*BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE)
    end_rect = pygame.Rect(end[0]*BLOCK_SIZE, end[1]*BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE)
    pygame.draw.rect(screen, GREEN, start_rect)
    pygame.draw.rect(screen, RED, end_rect)
    pygame.display.update()

def display_message(message, text_color=BLACK, background_color=WHITE):
    font = pygame.font.Font(None, 36)
    text = font.render(message, True, text_color, background_color)
    text_rect = text.get_rect(center=(WINDOW_SIZE[0]//2, WINDOW_SIZE[1]//2))

    background_rect = pygame.Rect(text_rect.left - 10, text_rect.top - 10, text_rect.width + 20, text_rect.height + 20)
    pygame.draw.rect(screen, background_color, background_rect)

    screen.blit(text, text_rect)
    pygame.display.update()

def initialize_game():
    start = (0, 0)
    end = (MAZE_DIM[0] - 2, MAZE_DIM[1] - 2)
    button_width = 80
    button_height = 25
    start_button = Button(CYAN, (WINDOW_SIZE[0] - button_width) // 2, WINDOW_SIZE[1] - button_height + 5, button_width, button_height, 'Start')
    return start, end, start_button

def handle_events(start_button, maze, start, end):
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            if start_button.is_over(mouse_pos):
                solution_path = solve_maze(maze.copy(), start, end)
                if solution_path:
                    draw_path(solution_path)
                return True
    return None

def main_game_loop(start, end, start_button):
    running = True
    while running:
        maze = generate_maze(MAZE_DIM)
        screen.fill(BLACK)
        draw_maze(maze)
        draw_start_end(start, end)
        start_button.draw(screen)
        pygame.display.flip()

        waiting_for_input = True
        while waiting_for_input:
            result = handle_events(start_button, maze, start, end)
            if result is False:
                return 
            elif result is True:
                waiting_for_input = False

        if running:
            prompt_new_maze()

def prompt_new_maze():
    display_message("Press any key or click to start a new maze.", text_color=BLACK, background_color=WHITE)
    waiting_for_keypress = True
    while waiting_for_keypress:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return
            elif event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:
                return

start, end, start_button = initialize_game()
main_game_loop(start, end, start_button)

pygame.quit()
sys.exit()